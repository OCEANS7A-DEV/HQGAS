import {
  __commonJS
} from "./chunk-5WRI5ZAA.js";

// node_modules/jaconv/lib/jaconv.min.js
var require_jaconv_min = __commonJS({
  "node_modules/jaconv/lib/jaconv.min.js"(exports, module) {
    var jaconv;
    !function(n) {
      var e = { "あ": "A", "い": "I", "う": "U", "え": "E", "お": "O", "か": "KA", "き": "KI", "く": "KU", "け": "KE", "こ": "KO", "さ": "SA", "し": "SHI", "す": "SU", "せ": "SE", "そ": "SO", "た": "TA", "ち": "CHI", "つ": "TSU", "て": "TE", "と": "TO", "な": "NA", "に": "NI", "ぬ": "NU", "ね": "NE", "の": "NO", "は": "HA", "ひ": "HI", "ふ": "FU", "へ": "HE", "ほ": "HO", "ま": "MA", "み": "MI", "む": "MU", "め": "ME", "も": "MO", "や": "YA", "ゆ": "YU", "よ": "YO", "ら": "RA", "り": "RI", "る": "RU", "れ": "RE", "ろ": "RO", "わ": "WA", "ゐ": "I", "ゑ": "E", "を": "O", "ぁ": "A", "ぃ": "I", "ぅ": "U", "ぇ": "E", "ぉ": "O", "が": "GA", "ぎ": "GI", "ぐ": "GU", "げ": "GE", "ご": "GO", "ざ": "ZA", "じ": "JI", "ず": "ZU", "ぜ": "ZE", "ぞ": "ZO", "だ": "DA", "ぢ": "JI", "づ": "ZU", "で": "DE", "ど": "DO", "ば": "BA", "び": "BI", "ぶ": "BU", "べ": "BE", "ぼ": "BO", "ぱ": "PA", "ぴ": "PI", "ぷ": "PU", "ぺ": "PE", "ぽ": "PO", "きゃ": "KYA", "きゅ": "KYU", "きょ": "KYO", "しゃ": "SHA", "しゅ": "SHU", "しょ": "SHO", "ちゃ": "CHA", "ちゅ": "CHU", "ちょ": "CHO", "ちぇ": "CHE", "にゃ": "NYA", "にゅ": "NYU", "にょ": "NYO", "ひゃ": "HYA", "ひゅ": "HYU", "ひょ": "HYO", "みゃ": "MYA", "みゅ": "MYU", "みょ": "MYO", "りゃ": "RYA", "りゅ": "RYU", "りょ": "RYO", "ぎゃ": "GYA", "ぎゅ": "GYU", "ぎょ": "GYO", "じゃ": "JA", "じゅ": "JU", "じょ": "JO", "びゃ": "BYA", "びゅ": "BYU", "びょ": "BYO", "ぴゃ": "PYA", "ぴゅ": "PYU", "ぴょ": "PYO" }, u = { AA: true, EE: true, II: false, OO: true, OU: true, UU: true }, h = function(n2, t) {
        var r = null, o = null;
        return t + 1 < n2.length && (o = n2.substring(t, t + 2), r = e[o]), !r && t < n2.length && (o = n2.substring(t, t + 1), r = e[o]), { c: o, h: r || null };
      };
      n.toHebon = function(n2) {
        for (var t = "", r = "", o = 0; o < n2.length; ) {
          var e2 = h(n2, o);
          if ("っ" == e2.c) null != (a = h(n2, o + 1)).h && (0 == a.h.indexOf("CH") ? e2.h = "T" : e2.h = a.h.substring(0, 1));
          else if ("ん" == e2.c) {
            var a;
            null != (a = h(n2, o + 1)).h && -1 != "BMP".indexOf(a.h.charAt(0)) ? e2.h = "M" : e2.h = "N";
          } else "ー" == e2.c && (e2.h = "");
          if (null != e2.h) {
            if (null != r) {
              var c = r + e2.h;
              2 < c.length && (c = c.substring(c.length - 2)), u[c] && (e2.h = "");
            }
            t += e2.h;
          } else t += e2.c;
          r = e2.h, e2.c, o += e2.c.length;
        }
        return t;
      };
    }(jaconv || (jaconv = {})), function(n) {
      var e = "ぁ".charCodeAt(0), a = "ゖ".charCodeAt(0), c = "ァ".charCodeAt(0), u = "ヶ".charCodeAt(0);
      n.toKatakana = function(n2) {
        for (var t = "", r = 0; r < n2.length; r += 1) {
          var o = n2.charCodeAt(r);
          t += e <= o && o <= a ? String.fromCharCode(o - e + c) : n2.charAt(r);
        }
        return t;
      }, n.toHiragana = function(n2) {
        for (var t = "", r = 0; r < n2.length; r += 1) {
          var o = n2.charCodeAt(r);
          t += c <= o && o <= u ? String.fromCharCode(o - c + e) : n2.charAt(r);
        }
        return t;
      };
    }(jaconv || (jaconv = {})), function(n) {
      "object" == typeof exports && (module.exports = n);
    }(jaconv || (jaconv = {})), function(n) {
      var t = function(n2) {
        var c2 = {}, u2 = {};
        if (n2.length % 2 != 0) throw "bad data length:" + n2.length;
        for (var t2, r2, o2 = n2.length / 2, e2 = 0; e2 < o2; e2 += 1) t2 = n2[2 * e2], r2 = n2[2 * e2 + 1], c2[t2] || (c2[t2] = r2), u2[r2] || (u2[r2] = t2);
        return { convert: function(n3, t3) {
          for (var r3 = t3 ? u2 : c2, o3 = "", e3 = 0; e3 < n3.length; e3 += 1) {
            var a2;
            e3 + 1 < n3.length && (a2 = r3[n3.substring(e3, e3 + 2)]) ? (o3 += a2, e3 += 1) : (a2 = r3[n3.substring(e3, e3 + 1)]) ? o3 += a2 : o3 += n3.substring(e3, e3 + 1);
          }
          return o3;
        } };
      }, r = t([" ", "　", "!", "！", '"', "”", '"', "“", "#", "＃", "$", "＄", "%", "％", "&", "＆", "'", "’", "(", "（", ")", "）", "*", "＊", "+", "＋", ",", "，", "-", "－", ".", "．", "/", "／", "0", "０", "1", "１", "2", "２", "3", "３", "4", "４", "5", "５", "6", "６", "7", "７", "8", "８", "9", "９", ":", "：", ";", "；", "<", "＜", "=", "＝", ">", "＞", "?", "？", "@", "＠", "A", "Ａ", "B", "Ｂ", "C", "Ｃ", "D", "Ｄ", "E", "Ｅ", "F", "Ｆ", "G", "Ｇ", "H", "Ｈ", "I", "Ｉ", "J", "Ｊ", "K", "Ｋ", "L", "Ｌ", "M", "Ｍ", "N", "Ｎ", "O", "Ｏ", "P", "Ｐ", "Q", "Ｑ", "R", "Ｒ", "S", "Ｓ", "T", "Ｔ", "U", "Ｕ", "V", "Ｖ", "W", "Ｗ", "X", "Ｘ", "Y", "Ｙ", "Z", "Ｚ", "[", "［", "\\", "￥", "]", "］", "^", "＾", "_", "＿", "`", "‘", "a", "ａ", "b", "ｂ", "c", "ｃ", "d", "ｄ", "e", "ｅ", "f", "ｆ", "g", "ｇ", "h", "ｈ", "i", "ｉ", "j", "ｊ", "k", "ｋ", "l", "ｌ", "m", "ｍ", "n", "ｎ", "o", "ｏ", "p", "ｐ", "q", "ｑ", "r", "ｒ", "s", "ｓ", "t", "ｔ", "u", "ｕ", "v", "ｖ", "w", "ｗ", "x", "ｘ", "y", "ｙ", "z", "ｚ", "{", "｛", "|", "｜", "}", "｝", "~", "～"]), o = t(["。", "｡", "「", "｢", "」", "｣", "、", "､", "・", "･", "ヲ", "ｦ", "ァ", "ｧ", "ィ", "ｨ", "ゥ", "ｩ", "ェ", "ｪ", "ォ", "ｫ", "ャ", "ｬ", "ュ", "ｭ", "ョ", "ｮ", "ッ", "ｯ", "ー", "ｰ", "ア", "ｱ", "イ", "ｲ", "ウ", "ｳ", "エ", "ｴ", "オ", "ｵ", "カ", "ｶ", "キ", "ｷ", "ク", "ｸ", "ケ", "ｹ", "コ", "ｺ", "ガ", "ｶﾞ", "ギ", "ｷﾞ", "グ", "ｸﾞ", "ゲ", "ｹﾞ", "ゴ", "ｺﾞ", "サ", "ｻ", "シ", "ｼ", "ス", "ｽ", "セ", "ｾ", "ソ", "ｿ", "ザ", "ｻﾞ", "ジ", "ｼﾞ", "ズ", "ｽﾞ", "ゼ", "ｾﾞ", "ゾ", "ｿﾞ", "タ", "ﾀ", "チ", "ﾁ", "ツ", "ﾂ", "テ", "ﾃ", "ト", "ﾄ", "ダ", "ﾀﾞ", "ヂ", "ﾁﾞ", "ヅ", "ﾂﾞ", "デ", "ﾃﾞ", "ド", "ﾄﾞ", "ナ", "ﾅ", "ニ", "ﾆ", "ヌ", "ﾇ", "ネ", "ﾈ", "ノ", "ﾉ", "ハ", "ﾊ", "ヒ", "ﾋ", "フ", "ﾌ", "ヘ", "ﾍ", "ホ", "ﾎ", "バ", "ﾊﾞ", "ビ", "ﾋﾞ", "ブ", "ﾌﾞ", "ベ", "ﾍﾞ", "ボ", "ﾎﾞ", "パ", "ﾊﾟ", "ピ", "ﾋﾟ", "プ", "ﾌﾟ", "ペ", "ﾍﾟ", "ポ", "ﾎﾟ", "マ", "ﾏ", "ミ", "ﾐ", "ム", "ﾑ", "メ", "ﾒ", "モ", "ﾓ", "ヤ", "ﾔ", "ユ", "ﾕ", "ヨ", "ﾖ", "ラ", "ﾗ", "リ", "ﾘ", "ル", "ﾙ", "レ", "ﾚ", "ロ", "ﾛ", "ワ", "ﾜ", "ン", "ﾝ", "ヴ", "ｳﾞ", "゛", "ﾞ", "゜", "ﾟ", "ヰ", "ｲ", "ヱ", "ｴ", "ヮ", "ﾜ", "ヵ", "ｶ", "ヶ", "ｹ"]);
      function e(n2) {
        return r.convert(n2, true);
      }
      function a(n2) {
        return r.convert(n2, false);
      }
      function c(n2) {
        return o.convert(n2, false);
      }
      function u(n2) {
        return o.convert(n2, true);
      }
      n.toHanAscii = e, n.toZenAscii = a, n.toHanKana = c, n.toZenKana = u, n.toHan = function(n2) {
        return e(c(n2));
      }, n.toZen = function(n2) {
        return a(u(n2));
      }, n.normalize = function(n2) {
        return e(u(n2));
      };
    }(jaconv || (jaconv = {}));
  }
});
export default require_jaconv_min();
//# sourceMappingURL=jaconv.js.map
